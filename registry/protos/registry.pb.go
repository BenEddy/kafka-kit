// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/registry.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TagResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagResponse) Reset()         { *m = TagResponse{} }
func (m *TagResponse) String() string { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()    {}
func (*TagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{0}
}

func (m *TagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagResponse.Unmarshal(m, b)
}
func (m *TagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagResponse.Marshal(b, m, deterministic)
}
func (m *TagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagResponse.Merge(m, src)
}
func (m *TagResponse) XXX_Size() int {
	return xxx_messageInfo_TagResponse.Size(m)
}
func (m *TagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TagResponse proto.InternalMessageInfo

func (m *TagResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BrokerRequest struct {
	Tag                  []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerRequest) Reset()         { *m = BrokerRequest{} }
func (m *BrokerRequest) String() string { return proto.CompactTextString(m) }
func (*BrokerRequest) ProtoMessage()    {}
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{1}
}

func (m *BrokerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRequest.Unmarshal(m, b)
}
func (m *BrokerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRequest.Marshal(b, m, deterministic)
}
func (m *BrokerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRequest.Merge(m, src)
}
func (m *BrokerRequest) XXX_Size() int {
	return xxx_messageInfo_BrokerRequest.Size(m)
}
func (m *BrokerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRequest proto.InternalMessageInfo

func (m *BrokerRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *BrokerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BrokerResponse struct {
	Brokers              map[uint32]*Broker `protobuf:"bytes,5,rep,name=brokers,proto3" json:"brokers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ids                  []uint32           `protobuf:"varint,6,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BrokerResponse) Reset()         { *m = BrokerResponse{} }
func (m *BrokerResponse) String() string { return proto.CompactTextString(m) }
func (*BrokerResponse) ProtoMessage()    {}
func (*BrokerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{2}
}

func (m *BrokerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerResponse.Unmarshal(m, b)
}
func (m *BrokerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerResponse.Marshal(b, m, deterministic)
}
func (m *BrokerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerResponse.Merge(m, src)
}
func (m *BrokerResponse) XXX_Size() int {
	return xxx_messageInfo_BrokerResponse.Size(m)
}
func (m *BrokerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerResponse proto.InternalMessageInfo

func (m *BrokerResponse) GetBrokers() map[uint32]*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *BrokerResponse) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UnmappedBrokersRequest struct {
	Exclude              []string `protobuf:"bytes,1,rep,name=exclude,proto3" json:"exclude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmappedBrokersRequest) Reset()         { *m = UnmappedBrokersRequest{} }
func (m *UnmappedBrokersRequest) String() string { return proto.CompactTextString(m) }
func (*UnmappedBrokersRequest) ProtoMessage()    {}
func (*UnmappedBrokersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{3}
}

func (m *UnmappedBrokersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmappedBrokersRequest.Unmarshal(m, b)
}
func (m *UnmappedBrokersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmappedBrokersRequest.Marshal(b, m, deterministic)
}
func (m *UnmappedBrokersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmappedBrokersRequest.Merge(m, src)
}
func (m *UnmappedBrokersRequest) XXX_Size() int {
	return xxx_messageInfo_UnmappedBrokersRequest.Size(m)
}
func (m *UnmappedBrokersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmappedBrokersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnmappedBrokersRequest proto.InternalMessageInfo

func (m *UnmappedBrokersRequest) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type Broker struct {
	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Broker metadata from ZooKeeper.
	Id                          uint32            `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Listenersecurityprotocolmap map[string]string `protobuf:"bytes,6,rep,name=listenersecurityprotocolmap,proto3" json:"listenersecurityprotocolmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Endpoints                   []string          `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Rack                        string            `protobuf:"bytes,8,opt,name=rack,proto3" json:"rack,omitempty"`
	Jmxport                     uint32            `protobuf:"varint,9,opt,name=jmxport,proto3" json:"jmxport,omitempty"`
	Host                        string            `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	Timestamp                   int64             `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Port                        uint32            `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Version                     uint32            `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}          `json:"-"`
	XXX_unrecognized            []byte            `json:"-"`
	XXX_sizecache               int32             `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{4}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Broker) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Broker) GetListenersecurityprotocolmap() map[string]string {
	if m != nil {
		return m.Listenersecurityprotocolmap
	}
	return nil
}

func (m *Broker) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Broker) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Broker) GetJmxport() uint32 {
	if m != nil {
		return m.Jmxport
	}
	return 0
}

func (m *Broker) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Broker) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Broker) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Broker) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type TopicRequest struct {
	Tag                  []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicRequest) Reset()         { *m = TopicRequest{} }
func (m *TopicRequest) String() string { return proto.CompactTextString(m) }
func (*TopicRequest) ProtoMessage()    {}
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{5}
}

func (m *TopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicRequest.Unmarshal(m, b)
}
func (m *TopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicRequest.Marshal(b, m, deterministic)
}
func (m *TopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicRequest.Merge(m, src)
}
func (m *TopicRequest) XXX_Size() int {
	return xxx_messageInfo_TopicRequest.Size(m)
}
func (m *TopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicRequest proto.InternalMessageInfo

func (m *TopicRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *TopicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateTopicRequest struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TargetBrokerTags     []string `protobuf:"bytes,2,rep,name=target_broker_tags,json=targetBrokerTags,proto3" json:"target_broker_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTopicRequest) Reset()         { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()    {}
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{6}
}

func (m *CreateTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTopicRequest.Unmarshal(m, b)
}
func (m *CreateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTopicRequest.Marshal(b, m, deterministic)
}
func (m *CreateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicRequest.Merge(m, src)
}
func (m *CreateTopicRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTopicRequest.Size(m)
}
func (m *CreateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicRequest proto.InternalMessageInfo

func (m *CreateTopicRequest) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *CreateTopicRequest) GetTargetBrokerTags() []string {
	if m != nil {
		return m.TargetBrokerTags
	}
	return nil
}

type TopicResponse struct {
	Topics               map[string]*Topic `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Names                []string          `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TopicResponse) Reset()         { *m = TopicResponse{} }
func (m *TopicResponse) String() string { return proto.CompactTextString(m) }
func (*TopicResponse) ProtoMessage()    {}
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{7}
}

func (m *TopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicResponse.Unmarshal(m, b)
}
func (m *TopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicResponse.Marshal(b, m, deterministic)
}
func (m *TopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicResponse.Merge(m, src)
}
func (m *TopicResponse) XXX_Size() int {
	return xxx_messageInfo_TopicResponse.Size(m)
}
func (m *TopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicResponse proto.InternalMessageInfo

func (m *TopicResponse) GetTopics() map[string]*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *TopicResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Topic struct {
	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Topic metadata from ZooKeeper.
	Name                 string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Partitions           uint32            `protobuf:"varint,6,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication          uint32            `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
	Configs              map[string]string `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{8}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetPartitions() uint32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *Topic) GetReplication() uint32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func (m *Topic) GetConfigs() map[string]string {
	if m != nil {
		return m.Configs
	}
	return nil
}

type OffsetMapping struct {
	UpstreamOffset       uint64   `protobuf:"varint,1,opt,name=upstream_offset,json=upstreamOffset,proto3" json:"upstream_offset,omitempty"`
	LocalOffset          uint64   `protobuf:"varint,2,opt,name=local_offset,json=localOffset,proto3" json:"local_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffsetMapping) Reset()         { *m = OffsetMapping{} }
func (m *OffsetMapping) String() string { return proto.CompactTextString(m) }
func (*OffsetMapping) ProtoMessage()    {}
func (*OffsetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{9}
}

func (m *OffsetMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OffsetMapping.Unmarshal(m, b)
}
func (m *OffsetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OffsetMapping.Marshal(b, m, deterministic)
}
func (m *OffsetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffsetMapping.Merge(m, src)
}
func (m *OffsetMapping) XXX_Size() int {
	return xxx_messageInfo_OffsetMapping.Size(m)
}
func (m *OffsetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_OffsetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_OffsetMapping proto.InternalMessageInfo

func (m *OffsetMapping) GetUpstreamOffset() uint64 {
	if m != nil {
		return m.UpstreamOffset
	}
	return 0
}

func (m *OffsetMapping) GetLocalOffset() uint64 {
	if m != nil {
		return m.LocalOffset
	}
	return 0
}

type TranslateOffsetRequest struct {
	RemoteClusterAlias   string   `protobuf:"bytes,1,opt,name=remote_cluster_alias,json=remoteClusterAlias,proto3" json:"remote_cluster_alias,omitempty"`
	GroupId              string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranslateOffsetRequest) Reset()         { *m = TranslateOffsetRequest{} }
func (m *TranslateOffsetRequest) String() string { return proto.CompactTextString(m) }
func (*TranslateOffsetRequest) ProtoMessage()    {}
func (*TranslateOffsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{10}
}

func (m *TranslateOffsetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateOffsetRequest.Unmarshal(m, b)
}
func (m *TranslateOffsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateOffsetRequest.Marshal(b, m, deterministic)
}
func (m *TranslateOffsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateOffsetRequest.Merge(m, src)
}
func (m *TranslateOffsetRequest) XXX_Size() int {
	return xxx_messageInfo_TranslateOffsetRequest.Size(m)
}
func (m *TranslateOffsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateOffsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateOffsetRequest proto.InternalMessageInfo

func (m *TranslateOffsetRequest) GetRemoteClusterAlias() string {
	if m != nil {
		return m.RemoteClusterAlias
	}
	return ""
}

func (m *TranslateOffsetRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type TranslateOffsetResponse struct {
	Offsets              map[string]*OffsetMapping `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TranslateOffsetResponse) Reset()         { *m = TranslateOffsetResponse{} }
func (m *TranslateOffsetResponse) String() string { return proto.CompactTextString(m) }
func (*TranslateOffsetResponse) ProtoMessage()    {}
func (*TranslateOffsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{11}
}

func (m *TranslateOffsetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateOffsetResponse.Unmarshal(m, b)
}
func (m *TranslateOffsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateOffsetResponse.Marshal(b, m, deterministic)
}
func (m *TranslateOffsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateOffsetResponse.Merge(m, src)
}
func (m *TranslateOffsetResponse) XXX_Size() int {
	return xxx_messageInfo_TranslateOffsetResponse.Size(m)
}
func (m *TranslateOffsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateOffsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateOffsetResponse proto.InternalMessageInfo

func (m *TranslateOffsetResponse) GetOffsets() map[string]*OffsetMapping {
	if m != nil {
		return m.Offsets
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{12}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TagResponse)(nil), "registry.TagResponse")
	proto.RegisterType((*BrokerRequest)(nil), "registry.BrokerRequest")
	proto.RegisterType((*BrokerResponse)(nil), "registry.BrokerResponse")
	proto.RegisterMapType((map[uint32]*Broker)(nil), "registry.BrokerResponse.BrokersEntry")
	proto.RegisterType((*UnmappedBrokersRequest)(nil), "registry.UnmappedBrokersRequest")
	proto.RegisterType((*Broker)(nil), "registry.Broker")
	proto.RegisterMapType((map[string]string)(nil), "registry.Broker.ListenersecurityprotocolmapEntry")
	proto.RegisterMapType((map[string]string)(nil), "registry.Broker.TagsEntry")
	proto.RegisterType((*TopicRequest)(nil), "registry.TopicRequest")
	proto.RegisterType((*CreateTopicRequest)(nil), "registry.CreateTopicRequest")
	proto.RegisterType((*TopicResponse)(nil), "registry.TopicResponse")
	proto.RegisterMapType((map[string]*Topic)(nil), "registry.TopicResponse.TopicsEntry")
	proto.RegisterType((*Topic)(nil), "registry.Topic")
	proto.RegisterMapType((map[string]string)(nil), "registry.Topic.ConfigsEntry")
	proto.RegisterMapType((map[string]string)(nil), "registry.Topic.TagsEntry")
	proto.RegisterType((*OffsetMapping)(nil), "registry.OffsetMapping")
	proto.RegisterType((*TranslateOffsetRequest)(nil), "registry.TranslateOffsetRequest")
	proto.RegisterType((*TranslateOffsetResponse)(nil), "registry.TranslateOffsetResponse")
	proto.RegisterMapType((map[string]*OffsetMapping)(nil), "registry.TranslateOffsetResponse.OffsetsEntry")
	proto.RegisterType((*Empty)(nil), "registry.Empty")
}

func init() { proto.RegisterFile("protos/registry.proto", fileDescriptor_4215e5fe8e6d7e5d) }

var fileDescriptor_4215e5fe8e6d7e5d = []byte{
	// 1243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdb, 0x6e, 0x1b, 0xc5,
	0x1b, 0x97, 0x9d, 0x38, 0x8e, 0xbf, 0xb5, 0x9b, 0x74, 0xfe, 0x4d, 0xb2, 0xdd, 0xe6, 0x5f, 0xb9,
	0x8b, 0x4a, 0xad, 0xaa, 0xf1, 0x52, 0x83, 0x28, 0x94, 0x8b, 0x8a, 0x1e, 0x54, 0x40, 0xe5, 0xa0,
	0xc5, 0x45, 0x50, 0x84, 0xcc, 0xd4, 0x3b, 0xd9, 0x2e, 0xde, 0x13, 0x3b, 0xe3, 0xaa, 0x51, 0x94,
	0x1b, 0x5e, 0x81, 0x1b, 0x9e, 0x02, 0x89, 0x3b, 0x78, 0x0e, 0x78, 0x04, 0x9e, 0x80, 0x27, 0x40,
	0xf3, 0xcd, 0x4c, 0xbc, 0x3e, 0x6c, 0xab, 0x86, 0x2b, 0xcf, 0xe1, 0x9b, 0xdf, 0xef, 0x9b, 0xdf,
	0x7c, 0x87, 0x35, 0xec, 0xe4, 0x45, 0x26, 0x32, 0xee, 0x15, 0x2c, 0x8c, 0xb8, 0x28, 0x8e, 0xfa,
	0x38, 0x27, 0x9b, 0x66, 0xee, 0xec, 0x87, 0x59, 0x16, 0xc6, 0xcc, 0xa3, 0x79, 0xe4, 0xd1, 0x34,
	0xcd, 0x04, 0x15, 0x51, 0x96, 0x72, 0x65, 0xe7, 0x5e, 0x03, 0x6b, 0x48, 0x43, 0x9f, 0xf1, 0x3c,
	0x4b, 0x39, 0x23, 0x36, 0x34, 0x13, 0xc6, 0x39, 0x0d, 0x99, 0x5d, 0xeb, 0xd6, 0x7a, 0x2d, 0xdf,
	0x4c, 0xdd, 0x9b, 0xd0, 0xb9, 0x5b, 0x64, 0x13, 0x56, 0xf8, 0xec, 0xc7, 0x29, 0xe3, 0x82, 0x6c,
	0xc3, 0x9a, 0xa0, 0xa1, 0x5d, 0xeb, 0xae, 0xf5, 0x5a, 0xbe, 0x1c, 0x92, 0x73, 0x50, 0x8f, 0x02,
	0xbb, 0xde, 0xad, 0xf5, 0x3a, 0x7e, 0x3d, 0x0a, 0xdc, 0xdf, 0x6a, 0x70, 0xce, 0x9c, 0xd1, 0xf8,
	0x77, 0xa0, 0xf9, 0x14, 0x57, 0xb8, 0xdd, 0xe8, 0xae, 0xf5, 0xac, 0xc1, 0xd5, 0xfe, 0xa9, 0xe3,
	0xf3, 0xa6, 0x7a, 0xca, 0x1f, 0xa4, 0xa2, 0x38, 0xf2, 0xcd, 0x29, 0xc9, 0x1a, 0x05, 0xdc, 0xde,
	0xe8, 0xae, 0xf5, 0x3a, 0xbe, 0x1c, 0x3a, 0x8f, 0xa0, 0x5d, 0x36, 0x95, 0x16, 0x13, 0x76, 0x84,
	0xee, 0x77, 0x7c, 0x39, 0x24, 0x6f, 0x42, 0xe3, 0x39, 0x8d, 0xa7, 0x0c, 0x5d, 0xb3, 0x06, 0xdb,
	0x4b, 0x94, 0x6a, 0xfb, 0x76, 0xfd, 0xbd, 0x9a, 0x3b, 0x80, 0xdd, 0xc7, 0x69, 0x42, 0xf3, 0x9c,
	0x05, 0x1a, 0xd5, 0xdc, 0xd7, 0x86, 0x26, 0x7b, 0x31, 0x8e, 0xa7, 0x01, 0xd3, 0x77, 0x36, 0x53,
	0xf7, 0x9f, 0x35, 0xd8, 0x50, 0xc6, 0xa4, 0x0f, 0xeb, 0x82, 0x86, 0x1c, 0x2d, 0xac, 0x81, 0xb3,
	0xc8, 0xd4, 0x1f, 0xd2, 0x50, 0xdf, 0x08, 0xed, 0xb4, 0x64, 0x0d, 0x23, 0x19, 0xe1, 0x70, 0x29,
	0x8e, 0xb8, 0x60, 0x29, 0x2b, 0x38, 0x1b, 0x4f, 0x8b, 0x48, 0x1c, 0xe1, 0x3b, 0x8d, 0xb3, 0x38,
	0xa1, 0x39, 0x5e, 0xdb, 0x1a, 0xdc, 0x5c, 0x82, 0x7d, 0x54, 0x7d, 0x46, 0xb1, 0xbd, 0x0c, 0x95,
	0xec, 0x43, 0x8b, 0xa5, 0x41, 0x9e, 0x45, 0xa9, 0xe0, 0x76, 0x13, 0xef, 0x36, 0x5b, 0x20, 0x04,
	0xd6, 0x0b, 0x3a, 0x9e, 0xd8, 0x9b, 0x18, 0x0f, 0x38, 0x96, 0x5a, 0xfc, 0x90, 0xbc, 0xc8, 0xb3,
	0x42, 0xd8, 0x2d, 0xf4, 0xdd, 0x4c, 0xa5, 0xf5, 0xb3, 0x8c, 0x0b, 0x1b, 0x94, 0xb5, 0x1c, 0x4b,
	0x7c, 0x11, 0x25, 0x8c, 0x0b, 0x9a, 0xe4, 0xb6, 0xd5, 0xad, 0xf5, 0xd6, 0xfc, 0xd9, 0x82, 0x3c,
	0x81, 0x40, 0x6d, 0x04, 0xc2, 0xb1, 0xc4, 0x7f, 0xce, 0x0a, 0x1e, 0x65, 0xa9, 0xdd, 0x51, 0xf8,
	0x7a, 0xea, 0xdc, 0x82, 0xd6, 0xa9, 0x86, 0xe5, 0xa7, 0x6e, 0xa9, 0xa7, 0xbe, 0x50, 0x7e, 0xea,
	0x56, 0xe9, 0x61, 0x9d, 0xcf, 0xa0, 0xfb, 0x2a, 0x95, 0x5e, 0x07, 0xcf, 0x7d, 0x07, 0xda, 0xc3,
	0x2c, 0x8f, 0xc6, 0xd5, 0xe9, 0x40, 0x60, 0x3d, 0xa5, 0x89, 0x39, 0x8a, 0x63, 0x37, 0x02, 0x72,
	0xaf, 0x60, 0x54, 0xb0, 0xb9, 0xb3, 0x57, 0xa1, 0x21, 0xe4, 0x1c, 0x99, 0xad, 0xc1, 0xd6, 0xec,
	0x7d, 0x95, 0x99, 0xda, 0x25, 0x37, 0x80, 0x08, 0x5a, 0x84, 0x4c, 0x8c, 0x54, 0x36, 0x8c, 0x30,
	0xd4, 0xea, 0xc8, 0xb8, 0xad, 0x76, 0x54, 0x3c, 0x48, 0x85, 0xdc, 0x5f, 0x6b, 0xd0, 0xd1, 0x2c,
	0x3a, 0xf9, 0x3e, 0x80, 0x0d, 0x04, 0x32, 0xb9, 0xf7, 0xc6, 0x22, 0x8f, 0x49, 0x3d, 0x9c, 0xe9,
	0x38, 0xd5, 0x47, 0xa4, 0x12, 0xf2, 0x06, 0x2a, 0xf5, 0x5a, 0xbe, 0x9a, 0x38, 0x9f, 0x80, 0x55,
	0x32, 0x5e, 0x21, 0xe0, 0xd5, 0xf9, 0xdc, 0x5b, 0xbe, 0xda, 0x4c, 0xd1, 0x3f, 0xea, 0xd0, 0xc0,
	0x45, 0x72, 0x30, 0x97, 0x45, 0x17, 0x17, 0xce, 0x2c, 0x25, 0x91, 0x11, 0xba, 0x31, 0x13, 0x9a,
	0x5c, 0x06, 0xc8, 0x69, 0x21, 0x22, 0xac, 0x75, 0xf6, 0x06, 0x06, 0x51, 0x69, 0x85, 0x74, 0xc1,
	0x2a, 0x58, 0x1e, 0x47, 0x63, 0xac, 0x86, 0x76, 0x13, 0x0d, 0xca, 0x4b, 0xe4, 0x5d, 0x68, 0x8e,
	0xb3, 0xf4, 0x30, 0x0a, 0xb9, 0xbd, 0x89, 0x7e, 0xec, 0x2f, 0xfa, 0x71, 0x4f, 0x6d, 0xeb, 0x0a,
	0xa5, 0x8d, 0xcf, 0x1e, 0xa1, 0xb7, 0xa1, 0x5d, 0x46, 0x7c, 0xad, 0x68, 0xfc, 0x16, 0x3a, 0x9f,
	0x1f, 0x1e, 0x72, 0x26, 0x3e, 0xa5, 0x79, 0x1e, 0xa5, 0x21, 0xb9, 0x06, 0x5b, 0xd3, 0x9c, 0x8b,
	0x82, 0xd1, 0x64, 0x94, 0xe1, 0x0e, 0x02, 0xad, 0xfb, 0xe7, 0xcc, 0xb2, 0xb2, 0x27, 0x57, 0xa0,
	0x1d, 0x67, 0x63, 0x1a, 0x1b, 0xab, 0x3a, 0x5a, 0x59, 0xb8, 0xa6, 0x4c, 0x5c, 0x06, 0xbb, 0xc3,
	0x82, 0xa6, 0x3c, 0xa6, 0x82, 0xa9, 0x25, 0x13, 0xb8, 0x6f, 0xc1, 0x85, 0x82, 0x25, 0x99, 0x60,
	0xa3, 0x71, 0x3c, 0xe5, 0x82, 0x15, 0x23, 0x1a, 0x47, 0x94, 0x6b, 0x9f, 0x89, 0xda, 0xbb, 0xa7,
	0xb6, 0x3e, 0x94, 0x3b, 0xe4, 0x22, 0x6c, 0x86, 0x45, 0x36, 0xcd, 0x47, 0xba, 0x53, 0xb4, 0xfc,
	0x26, 0xce, 0x3f, 0x0e, 0xdc, 0xdf, 0x6b, 0xb0, 0xb7, 0xc4, 0xa3, 0x43, 0xf7, 0x23, 0x68, 0x2a,
	0xff, 0x4c, 0x50, 0xf4, 0x4b, 0x8f, 0xb1, 0xfa, 0x4c, 0x5f, 0x4d, 0xcd, 0xf3, 0xe8, 0xe3, 0xce,
	0x97, 0xd0, 0x2e, 0x6f, 0xac, 0x50, 0xf9, 0x60, 0x3e, 0x64, 0xf7, 0x66, 0x4c, 0x73, 0x12, 0x97,
	0xe5, 0x6f, 0x42, 0xe3, 0x41, 0x92, 0x8b, 0xa3, 0xc1, 0x5f, 0x16, 0x6c, 0xfa, 0xda, 0x9c, 0x0c,
	0x01, 0x1e, 0x9a, 0x94, 0xe4, 0x64, 0x6f, 0xb9, 0xd3, 0xa1, 0x88, 0x8e, 0x5d, 0xd5, 0x02, 0xdd,
	0xff, 0xfd, 0xf4, 0xe7, 0xdf, 0x3f, 0xd7, 0x3b, 0xc4, 0xf2, 0x9e, 0xdf, 0xf4, 0x4c, 0x07, 0x7c,
	0x02, 0x96, 0x2c, 0x64, 0xff, 0x01, 0xd6, 0x46, 0x58, 0x42, 0xb6, 0x4b, 0xb0, 0x9e, 0x6c, 0x10,
	0x64, 0x02, 0x5b, 0x0b, 0xdd, 0x8f, 0x74, 0x67, 0x30, 0xab, 0x1b, 0xe3, 0x4b, 0x88, 0xf6, 0x91,
	0x68, 0x97, 0x5c, 0x28, 0x13, 0x4d, 0x35, 0x0a, 0xf9, 0x02, 0x5a, 0x0f, 0x99, 0x50, 0xe5, 0x83,
	0xec, 0x2e, 0xd5, 0x22, 0x05, 0xbe, 0x57, 0x51, 0xa3, 0x5c, 0x82, 0xd8, 0x6d, 0x02, 0x12, 0x5b,
	0xd7, 0xa8, 0xaf, 0x00, 0xa4, 0x34, 0x67, 0x85, 0xdc, 0x43, 0xc8, 0xf3, 0x64, 0x6b, 0x06, 0xa9,
	0x64, 0x79, 0x02, 0x56, 0xa9, 0x6a, 0x93, 0x52, 0x21, 0x58, 0x2e, 0xe6, 0x4e, 0xa9, 0xc4, 0x61,
	0x4c, 0x18, 0x15, 0xdc, 0xf3, 0x25, 0xd8, 0x31, 0x9e, 0xbb, 0x5d, 0xbb, 0x4e, 0xbe, 0x83, 0xf3,
	0x3e, 0xa3, 0x9c, 0x47, 0x61, 0x1a, 0xa5, 0xa1, 0x76, 0x7d, 0x11, 0xa3, 0xda, 0xe7, 0xcb, 0x08,
	0x6e, 0x93, 0xdd, 0x12, 0x78, 0x31, 0xc3, 0x23, 0x0c, 0x76, 0x1e, 0xa7, 0x81, 0x7c, 0x13, 0x55,
	0xd9, 0x58, 0xf0, 0xda, 0x14, 0x2e, 0x52, 0xec, 0x13, 0xa7, 0x44, 0x31, 0x95, 0x98, 0xc5, 0x29,
	0x26, 0x09, 0x74, 0xaf, 0xd1, 0xb9, 0x51, 0x2d, 0x7e, 0x75, 0xb0, 0x5c, 0x41, 0x9a, 0x4b, 0xe4,
	0xa2, 0xa4, 0x49, 0x34, 0x8e, 0xe2, 0xf3, 0x8e, 0x65, 0x4d, 0x3f, 0x21, 0x81, 0xf9, 0x9e, 0x3c,
	0xa5, 0xa9, 0x8c, 0xfe, 0xca, 0xdb, 0x74, 0x91, 0xc6, 0x21, 0xf6, 0x1c, 0x8d, 0x0a, 0x4e, 0xef,
	0x38, 0x0a, 0x4e, 0xc8, 0xd7, 0xb0, 0x39, 0xa4, 0xea, 0x25, 0x2a, 0xaf, 0xb1, 0x53, 0x5a, 0x9f,
	0x7d, 0x3e, 0xbb, 0xff, 0x47, 0xf0, 0x3d, 0x67, 0xa7, 0x24, 0x95, 0xa0, 0xa1, 0xf1, 0x7f, 0x04,
	0x5b, 0xf7, 0x59, 0xcc, 0x74, 0xc0, 0xc8, 0x2e, 0x71, 0x46, 0x82, 0xeb, 0x15, 0x04, 0xdf, 0x60,
	0xef, 0xd1, 0xdf, 0xa2, 0x95, 0xda, 0x54, 0x60, 0xeb, 0x38, 0x75, 0xe6, 0xb2, 0x15, 0xc1, 0xa5,
	0x2a, 0xdf, 0xc3, 0xb6, 0xf2, 0x7d, 0xf6, 0x89, 0x71, 0x56, 0x86, 0xeb, 0xab, 0x19, 0x7e, 0xa9,
	0xc1, 0xf6, 0x42, 0x2d, 0x9f, 0x2b, 0x3f, 0xab, 0x7b, 0x90, 0x73, 0xe5, 0x95, 0x9d, 0xc0, 0xbd,
	0x83, 0xbc, 0xef, 0x93, 0x5b, 0xa8, 0x9a, 0x31, 0x3a, 0xd0, 0x2d, 0xc1, 0x3b, 0x5e, 0xd5, 0xc3,
	0x4e, 0xbc, 0x63, 0xd3, 0xa8, 0x4e, 0xee, 0xf6, 0x9f, 0xdc, 0x08, 0x23, 0xf1, 0x6c, 0xfa, 0xb4,
	0x3f, 0xce, 0x12, 0xef, 0x3e, 0x15, 0xf4, 0x7e, 0x16, 0x7a, 0x13, 0x7a, 0x38, 0xa1, 0x07, 0x93,
	0x48, 0x9c, 0xfe, 0xf9, 0xf2, 0xd4, 0x9f, 0xb1, 0xa7, 0x1b, 0xf8, 0xfb, 0xf6, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xdf, 0x99, 0x66, 0x65, 0x9d, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// UnmappedBrokers returns a BrokerResponse with the ids field
	// populated with broker IDs that do not hold any assigned partitions.
	// Any topic names specified in the UnmappedBrokersRequest exclude field
	// are ignored. For example, broker 1000 holds no partitions other
	// than one belonging to the 'test0' topic. If UnmappedBrokers is called
	// with 'test0' specified as an exclude name, broker 1000 will be returned
	// in the BrokerResponse as an unmapped broker.
	UnmappedBrokers(ctx context.Context, in *UnmappedBrokersRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	//
	//CreateTopic creates a topic.
	//Example:
	//$ curl -XPOST "localhost:8080/v1/topics/create" -d '{
	//"topic": {
	//"name": "mytopic",
	//"partitions": 32,
	//"replication": 2,
	//"tags": {"env":"staging"}
	//},
	//"target_broker_tags": ["pool:tests"]
	//}'
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Empty, error)
	// ReassigningTopics returns a TopicResponse with the names field populated
	// with topic names of all topics undergoing a reassignment.
	ReassigningTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error)
	// UnderReplicatedTopics returns a TopicResponse with the names field populated
	// with topic names of all under replicated topics.
	UnderReplicatedTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. Both a single topic name or specified in the
	// TopicRequest.name field.
	TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for the requested broker. The broker is specified in the
	// BrokerRequest.id field.
	BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// TagTopic takes a TopicRequest and sets any specified
	// tags for the named topic. Any existing tags that are
	// not specified in the request are left unmodified.
	TagTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// DeleteTopicTags takes a TopicRequest and deletes any
	// specified tags for the named topic. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteTopicTags(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// TagBroker takes a BrokerRequest and sets any specified
	// tags for the named broker. Any existing tags that are
	// not specified in the request are left unmodified.
	TagBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// DeleteBrokerTags takes a BrokerRequest and deletes any
	// specified tags for the named broker. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteBrokerTags(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// TranslateOffsets returns a TranslateOffsetResponse with the
	// the upstream/local offsets for the provided consumer group
	// populated per topic/partition.
	// The remote cluster alias and consumer group id are specified
	// in the TranslateOffsetRequest.remote_cluster_alias and
	// TranslateOffsetRequest.group_id respectively.
	TranslateOffsets(ctx context.Context, in *TranslateOffsetRequest, opts ...grpc.CallOption) (*TranslateOffsetResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnmappedBrokers(ctx context.Context, in *UnmappedBrokersRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/UnmappedBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/registry.Registry/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ReassigningTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ReassigningTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnderReplicatedTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/UnderReplicatedTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TopicMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/BrokerMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TagTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TagTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteTopicTags(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/DeleteTopicTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TagBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TagBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteBrokerTags(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/DeleteBrokerTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TranslateOffsets(ctx context.Context, in *TranslateOffsetRequest, opts ...grpc.CallOption) (*TranslateOffsetResponse, error) {
	out := new(TranslateOffsetResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TranslateOffsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// UnmappedBrokers returns a BrokerResponse with the ids field
	// populated with broker IDs that do not hold any assigned partitions.
	// Any topic names specified in the UnmappedBrokersRequest exclude field
	// are ignored. For example, broker 1000 holds no partitions other
	// than one belonging to the 'test0' topic. If UnmappedBrokers is called
	// with 'test0' specified as an exclude name, broker 1000 will be returned
	// in the BrokerResponse as an unmapped broker.
	UnmappedBrokers(context.Context, *UnmappedBrokersRequest) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	//
	//CreateTopic creates a topic.
	//Example:
	//$ curl -XPOST "localhost:8080/v1/topics/create" -d '{
	//"topic": {
	//"name": "mytopic",
	//"partitions": 32,
	//"replication": 2,
	//"tags": {"env":"staging"}
	//},
	//"target_broker_tags": ["pool:tests"]
	//}'
	CreateTopic(context.Context, *CreateTopicRequest) (*Empty, error)
	// ReassigningTopics returns a TopicResponse with the names field populated
	// with topic names of all topics undergoing a reassignment.
	ReassigningTopics(context.Context, *Empty) (*TopicResponse, error)
	// UnderReplicatedTopics returns a TopicResponse with the names field populated
	// with topic names of all under replicated topics.
	UnderReplicatedTopics(context.Context, *Empty) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. Both a single topic name or specified in the
	// TopicRequest.name field.
	TopicMappings(context.Context, *TopicRequest) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for the requested broker. The broker is specified in the
	// BrokerRequest.id field.
	BrokerMappings(context.Context, *BrokerRequest) (*TopicResponse, error)
	// TagTopic takes a TopicRequest and sets any specified
	// tags for the named topic. Any existing tags that are
	// not specified in the request are left unmodified.
	TagTopic(context.Context, *TopicRequest) (*TagResponse, error)
	// DeleteTopicTags takes a TopicRequest and deletes any
	// specified tags for the named topic. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteTopicTags(context.Context, *TopicRequest) (*TagResponse, error)
	// TagBroker takes a BrokerRequest and sets any specified
	// tags for the named broker. Any existing tags that are
	// not specified in the request are left unmodified.
	TagBroker(context.Context, *BrokerRequest) (*TagResponse, error)
	// DeleteBrokerTags takes a BrokerRequest and deletes any
	// specified tags for the named broker. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteBrokerTags(context.Context, *BrokerRequest) (*TagResponse, error)
	// TranslateOffsets returns a TranslateOffsetResponse with the
	// the upstream/local offsets for the provided consumer group
	// populated per topic/partition.
	// The remote cluster alias and consumer group id are specified
	// in the TranslateOffsetRequest.remote_cluster_alias and
	// TranslateOffsetRequest.group_id respectively.
	TranslateOffsets(context.Context, *TranslateOffsetRequest) (*TranslateOffsetResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnmappedBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmappedBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnmappedBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/UnmappedBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnmappedBrokers(ctx, req.(*UnmappedBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ReassigningTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ReassigningTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ReassigningTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ReassigningTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnderReplicatedTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnderReplicatedTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/UnderReplicatedTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnderReplicatedTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TopicMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TopicMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TopicMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TopicMappings(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_BrokerMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).BrokerMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/BrokerMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).BrokerMappings(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TagTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TagTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TagTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TagTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteTopicTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteTopicTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/DeleteTopicTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteTopicTags(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TagBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TagBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TagBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TagBroker(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteBrokerTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteBrokerTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/DeleteBrokerTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteBrokerTags(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TranslateOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TranslateOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TranslateOffsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TranslateOffsets(ctx, req.(*TranslateOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrokers",
			Handler:    _Registry_GetBrokers_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _Registry_ListBrokers_Handler,
		},
		{
			MethodName: "UnmappedBrokers",
			Handler:    _Registry_UnmappedBrokers_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _Registry_GetTopics_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Registry_ListTopics_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Registry_CreateTopic_Handler,
		},
		{
			MethodName: "ReassigningTopics",
			Handler:    _Registry_ReassigningTopics_Handler,
		},
		{
			MethodName: "UnderReplicatedTopics",
			Handler:    _Registry_UnderReplicatedTopics_Handler,
		},
		{
			MethodName: "TopicMappings",
			Handler:    _Registry_TopicMappings_Handler,
		},
		{
			MethodName: "BrokerMappings",
			Handler:    _Registry_BrokerMappings_Handler,
		},
		{
			MethodName: "TagTopic",
			Handler:    _Registry_TagTopic_Handler,
		},
		{
			MethodName: "DeleteTopicTags",
			Handler:    _Registry_DeleteTopicTags_Handler,
		},
		{
			MethodName: "TagBroker",
			Handler:    _Registry_TagBroker_Handler,
		},
		{
			MethodName: "DeleteBrokerTags",
			Handler:    _Registry_DeleteBrokerTags_Handler,
		},
		{
			MethodName: "TranslateOffsets",
			Handler:    _Registry_TranslateOffsets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/registry.proto",
}
