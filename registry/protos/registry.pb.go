// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BrokerRequest struct {
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Broker               *Broker  `protobuf:"bytes,2,opt,name=broker,proto3" json:"broker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerRequest) Reset()         { *m = BrokerRequest{} }
func (m *BrokerRequest) String() string { return proto.CompactTextString(m) }
func (*BrokerRequest) ProtoMessage()    {}
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{0}
}

func (m *BrokerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRequest.Unmarshal(m, b)
}
func (m *BrokerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRequest.Marshal(b, m, deterministic)
}
func (m *BrokerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRequest.Merge(m, src)
}
func (m *BrokerRequest) XXX_Size() int {
	return xxx_messageInfo_BrokerRequest.Size(m)
}
func (m *BrokerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRequest proto.InternalMessageInfo

func (m *BrokerRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BrokerRequest) GetBroker() *Broker {
	if m != nil {
		return m.Broker
	}
	return nil
}

type BrokerResponse struct {
	Brokers              map[uint32]*Broker `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ids                  []uint32           `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BrokerResponse) Reset()         { *m = BrokerResponse{} }
func (m *BrokerResponse) String() string { return proto.CompactTextString(m) }
func (*BrokerResponse) ProtoMessage()    {}
func (*BrokerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{1}
}

func (m *BrokerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerResponse.Unmarshal(m, b)
}
func (m *BrokerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerResponse.Marshal(b, m, deterministic)
}
func (m *BrokerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerResponse.Merge(m, src)
}
func (m *BrokerResponse) XXX_Size() int {
	return xxx_messageInfo_BrokerResponse.Size(m)
}
func (m *BrokerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerResponse proto.InternalMessageInfo

func (m *BrokerResponse) GetBrokers() map[uint32]*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *BrokerResponse) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Broker struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rack                 string   `protobuf:"bytes,2,opt,name=rack,proto3" json:"rack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{2}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Broker) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

type TopicRequest struct {
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Topic                *Topic   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicRequest) Reset()         { *m = TopicRequest{} }
func (m *TopicRequest) String() string { return proto.CompactTextString(m) }
func (*TopicRequest) ProtoMessage()    {}
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{3}
}

func (m *TopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicRequest.Unmarshal(m, b)
}
func (m *TopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicRequest.Marshal(b, m, deterministic)
}
func (m *TopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicRequest.Merge(m, src)
}
func (m *TopicRequest) XXX_Size() int {
	return xxx_messageInfo_TopicRequest.Size(m)
}
func (m *TopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicRequest proto.InternalMessageInfo

func (m *TopicRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TopicRequest) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

type TopicResponse struct {
	Topics               map[string]*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Names                []string          `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TopicResponse) Reset()         { *m = TopicResponse{} }
func (m *TopicResponse) String() string { return proto.CompactTextString(m) }
func (*TopicResponse) ProtoMessage()    {}
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{4}
}

func (m *TopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicResponse.Unmarshal(m, b)
}
func (m *TopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicResponse.Marshal(b, m, deterministic)
}
func (m *TopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicResponse.Merge(m, src)
}
func (m *TopicResponse) XXX_Size() int {
	return xxx_messageInfo_TopicResponse.Size(m)
}
func (m *TopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicResponse proto.InternalMessageInfo

func (m *TopicResponse) GetTopics() map[string]*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *TopicResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Topic struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Partitions           uint32   `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication          uint32   `protobuf:"varint,3,opt,name=replication,proto3" json:"replication,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{5}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetPartitions() uint32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *Topic) GetReplication() uint32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func init() {
	proto.RegisterType((*BrokerRequest)(nil), "registry.BrokerRequest")
	proto.RegisterType((*BrokerResponse)(nil), "registry.BrokerResponse")
	proto.RegisterMapType((map[uint32]*Broker)(nil), "registry.BrokerResponse.BrokersEntry")
	proto.RegisterType((*Broker)(nil), "registry.Broker")
	proto.RegisterType((*TopicRequest)(nil), "registry.TopicRequest")
	proto.RegisterType((*TopicResponse)(nil), "registry.TopicResponse")
	proto.RegisterMapType((map[string]*Topic)(nil), "registry.TopicResponse.TopicsEntry")
	proto.RegisterType((*Topic)(nil), "registry.Topic")
}

func init() { proto.RegisterFile("protos/registry.proto", fileDescriptor_4215e5fe8e6d7e5d) }

var fileDescriptor_4215e5fe8e6d7e5d = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0x6a, 0xeb, 0xe6, 0xa4, 0xd9, 0xad, 0xc7, 0x3f, 0x0d, 0x45, 0x24, 0x44, 0x2a,
	0xbd, 0x90, 0x0d, 0xd6, 0x1b, 0xd1, 0x0b, 0x41, 0x90, 0x45, 0x59, 0x41, 0xc2, 0x82, 0x78, 0xe1,
	0xc5, 0x6c, 0x3b, 0x94, 0xa1, 0x35, 0x13, 0x67, 0x66, 0x17, 0x7a, 0xeb, 0x2b, 0xf8, 0x1e, 0x82,
	0xcf, 0xe2, 0x2b, 0x88, 0xcf, 0x21, 0x73, 0x66, 0x62, 0xa3, 0xa1, 0x5e, 0xb8, 0x77, 0x73, 0xe6,
	0x7c, 0xe7, 0x77, 0x26, 0xdf, 0x39, 0x81, 0xdb, 0xb5, 0x92, 0x46, 0xea, 0x42, 0xf1, 0x95, 0xd0,
	0x46, 0x6d, 0x8f, 0x29, 0xc6, 0x83, 0x26, 0x9e, 0xdc, 0x5d, 0x49, 0xb9, 0xda, 0xf0, 0x82, 0xd5,
	0xa2, 0x60, 0x55, 0x25, 0x0d, 0x33, 0x42, 0x56, 0xda, 0xe9, 0xf2, 0x37, 0x90, 0xbc, 0x50, 0x72,
	0xcd, 0x55, 0xc9, 0x3f, 0x5d, 0x70, 0x6d, 0x10, 0xe1, 0x9a, 0x61, 0x2b, 0x9d, 0x06, 0x59, 0x6f,
	0x16, 0x95, 0x74, 0xc6, 0x19, 0x0c, 0xce, 0x49, 0x94, 0x86, 0x59, 0x30, 0x8b, 0xe7, 0xa3, 0xe3,
	0xdf, 0xdd, 0x7c, 0xb1, 0xcf, 0xe7, 0xdf, 0x02, 0x38, 0x6c, 0x78, 0xba, 0x96, 0x95, 0xe6, 0xf8,
	0x1c, 0xae, 0xbb, 0xa4, 0x63, 0xc6, 0xf3, 0x69, 0xa7, 0xda, 0x4b, 0x7d, 0xa8, 0x5f, 0x56, 0x46,
	0x6d, 0xcb, 0xa6, 0x0a, 0x47, 0xd0, 0x13, 0x4b, 0x9d, 0x86, 0x59, 0x6f, 0x96, 0x94, 0xf6, 0x38,
	0x39, 0x85, 0x61, 0x5b, 0x6a, 0x15, 0x6b, 0xbe, 0x4d, 0x83, 0x2c, 0xb0, 0x8a, 0x35, 0xdf, 0xe2,
	0x03, 0xe8, 0x5f, 0xb2, 0xcd, 0x05, 0xdf, 0xfb, 0x60, 0x97, 0x7e, 0x1a, 0x3e, 0x09, 0xf2, 0x87,
	0x30, 0x70, 0x97, 0x78, 0x08, 0xa1, 0x58, 0x7a, 0x4c, 0x28, 0x96, 0xd6, 0x0b, 0xc5, 0x16, 0x6b,
	0x82, 0x44, 0x25, 0x9d, 0xf3, 0x57, 0x30, 0x3c, 0x93, 0xb5, 0x58, 0xfc, 0xcb, 0xaf, 0x29, 0xf4,
	0x8d, 0xd5, 0xf8, 0xee, 0x47, 0xbb, 0xee, 0xae, 0xd4, 0x65, 0xf3, 0xaf, 0x01, 0x24, 0x9e, 0xe5,
	0xbd, 0x7a, 0x06, 0x03, 0x4a, 0x35, 0x56, 0xdd, 0xff, 0xbb, 0xb2, 0x71, 0x8a, 0x22, 0x6f, 0x94,
	0x2f, 0xc1, 0x5b, 0xd0, 0xaf, 0xd8, 0x47, 0xee, 0x9c, 0x8a, 0x4a, 0x17, 0x4c, 0x5e, 0x43, 0xdc,
	0x12, 0xb7, 0xad, 0x8a, 0x9c, 0x55, 0xd3, 0x3f, 0xad, 0xea, 0x3e, 0x76, 0xe7, 0xd4, 0x07, 0xe8,
	0xd3, 0x9d, 0xfd, 0x68, 0x4b, 0xf7, 0x18, 0x3a, 0xe3, 0x3d, 0x80, 0x9a, 0x29, 0x23, 0x68, 0xbb,
	0x08, 0x96, 0x94, 0xad, 0x1b, 0xcc, 0x20, 0x56, 0xbc, 0xde, 0x88, 0x05, 0xed, 0x5f, 0xda, 0x23,
	0x41, 0xfb, 0x6a, 0xfe, 0x33, 0x84, 0x83, 0xd2, 0x37, 0xc7, 0x33, 0x80, 0x13, 0x6e, 0xfc, 0x98,
	0x71, 0xdc, 0xdd, 0x19, 0xb2, 0x7f, 0x92, 0xee, 0x5b, 0xa6, 0xfc, 0xe6, 0xe7, 0xef, 0x3f, 0xbe,
	0x84, 0x09, 0xc6, 0xc5, 0xe5, 0xa3, 0xa2, 0xd9, 0xa5, 0xf7, 0x10, 0x9f, 0x0a, 0x7d, 0x15, 0xec,
	0x98, 0xb0, 0x37, 0xf0, 0xa8, 0x85, 0x2d, 0xc4, 0x52, 0xe3, 0x5b, 0x88, 0x4e, 0xb8, 0x71, 0x5e,
	0xe3, 0x9d, 0xce, 0xe0, 0x1c, 0x77, 0xbc, 0x67, 0xa0, 0x39, 0x12, 0x76, 0x88, 0x60, 0xb1, 0x7e,
	0xa0, 0xef, 0x00, 0xec, 0x63, 0xff, 0x17, 0x99, 0x12, 0x12, 0x71, 0xb4, 0x43, 0x16, 0xb4, 0x13,
	0xe7, 0x03, 0xfa, 0xf7, 0x1f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x80, 0xb9, 0x16, 0xca, 0x3c,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	GetBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	ListBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	GetTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	ListTopics(context.Context, *TopicRequest) (*TopicResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrokers",
			Handler:    _Registry_GetBrokers_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _Registry_ListBrokers_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _Registry_GetTopics_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Registry_ListTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/registry.proto",
}
